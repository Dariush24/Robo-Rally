title Sequence Diagram Robo-Rally

participant Client
participant Server

Client->>Server: welcomeServer(protocol: exampleProtocol)
Server-->>Client: welcomeUser(protocol: exampleProtocol)
Client->>Server: assignUserID(user_id: playerUID)
 alt Loss of connection
 Client->>Server: connectionStatus()
 end
Client->>Server: sendMessage(privateMessage: false, message: exampleMessage, receiver: allPlayers)
Client->>Server: sendMessage(privateMessage: true, message: exampleMessage, receiver: playerUID)
Server-->>Client: receiveMessage(message: exampleMessage, sender: playerUID)
Server-->>Client: faultyMessage(exception: Error, check that everything is correct or try again.)
Client->>Server: playerSettings(player_name: playerName, chosen_robot: robotUID, protocol: exampleProtocol)
Server-->>Client: newPlayer(player_id: playerUID, player_name: playerName, chosen_robot: robotUID, ready_to_play: true, energy_cubes: 5)
Client->>Server: boardSelection(availableBoards: [Board Names])
Client->>Server: chosenBoard(board: boardUID)
Client->>Server: startGame()
Client->>Server: setPhase(current_phase: phaseNumber)
Client->>Server: startingPosition(x: 0, y: 0, look_direction: [North, South, East, West])
Client->>Server: positionTaken(player_id: playerUID, x: 0, y: 0)
Client->>Server: shuffleCards(player_id: playerUID)
Client->>Server: programmingDeck(start_amount: 20, is_empty: false)
Client->>Server: drawHand(players_hand: cardNames, cards_in_hand: numberOfCards)
Client->>Server: purchasedCard(player_id: playerUID, purchased_card: cardName)
Client->>Server: selectedCards(selected_cards: [cardNames], registered_cards: card_order)
Client->>Server: selectionConfirmed(player_id: playerUID, selection_ended: true)
Client->>Server: startTimer()
Client->>Server: endOfTime(late_players: [playerUID])
Client->>Server: newHand(register_amount: 5, new_hand: [cardNames])
Client->>Server: lateNewHand(register_amount: 5, random_hand: [cardNames])
Client->>Server: specialCards(special_card: cardName, card_effects: applySpecialEffects)
Client->>Server: discardPile(player_id: playerUID, discarded_amount: [notInRegister])
Client->>Server: currentDeck(active_deck: [{player_id: playerUID, card_selected: cardName}])
Client->>Server: priorityPlayer(player_id: playerUID, robot: {robot_id: robotUID})
Client->>Server: playCard(player_id: playerUID, card_in_register: 1, played_card: cardName, apply_effect: applyEffect)
Client->>Server: playedPile(discarded_card: [cardName])
Client->>Server: playerMove(player_id: playerUID, to_x: xCoordinate, to_y: yCoordinate)
Client->>Server: lookDirection(player_id: playerUID, direction: clockwise)
Client->>Server: rebootTile(player_id: playerUID, reboot_direction: direction)
Client->>Server: checkPointReached(player_id: playerUID, checkpoint_reached: true)
Client->>Server: gameWinner(player_id: playerUID, number_of_checkpoints: amountOfCheckpoints, all_reached: true)
Client->>Server: endGame()